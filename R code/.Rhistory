plot_car(car_days, "Cumulative abnormal rate of return NYSE(reg)")
reg_for_car
reg
regNYSE
View(reg_for_car)
options(scipen=999)
source("dataFunctions.R")
source("dataPaths.R")
source("plots.R")
library(dplyr)
dataBase <- read.csv(path_main_db)
accidentsDB <- read.csv(path_accidents_db)
#exchangeRateIsraelBank <- read.csv(path_exchange_rates)
# accidentsDB <- fixTradingDates(accidentsDB)  #should already be fixed by python!
# set all categorical data types...
dataBase$DOW <- as.factor(dataBase$DOW)
dataBase$TAX <- as.factor(dataBase$TAX)
dataBase$after_holiday <- as.factor(dataBase$after_holiday)
dataBase$afterAccidentDays <- as.factor(dataBase$afterAccidentDays)
# calculate mean return on every day vs days after accident
simple_avg <- mean(dataBase$revenue, na.rm = TRUE)
day_accident <- mean(dataBase[dataBase$afterAccidentDays == -1, 'revenue'], na.rm = TRUE)
first_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 1, 'revenue'], na.rm = TRUE)
sec_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 2, 'revenue'], na.rm = TRUE)
third_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 3, 'revenue'], na.rm = TRUE)
# calculate mean return on every day vs days after accident
simple_avgNYSE <- mean(dataBase$NYSE_revenue, na.rm = TRUE)
day_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == -1, 'NYSE_revenue'], na.rm = TRUE)
first_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 1, 'NYSE_revenue'], na.rm = TRUE)
sec_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 2, 'NYSE_revenue'], na.rm = TRUE)
third_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 3, 'NYSE_revenue'], na.rm = TRUE)
dataBase$firstDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "1", 1, 0)
dataBase$secondDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "2", 1, 0)
dataBase$thirdDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "3", 1, 0)
Israel.first_tTest <- t.test(revenue ~ firstDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
Israel.sec_tTest <- t.test(revenue ~ secondDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
Israel.third_tTest <- t.test(revenue ~ thirdDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.first_tTest <- t.test(NYSE_revenue ~ firstDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.sec_tTest <- t.test(NYSE_revenue ~ secondDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.third_tTest <- t.test(NYSE_revenue ~ thirdDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
#Plot
stat_ecdfPlot(dataBase, "israel")
geom_histogramPlot(dataBase, "israel")
stat_ecdfPlot(dataBase, "usa")
geom_histogramPlot(dataBase, "usa")
options(scipen=999)
source("dataFunctions.R")
source("dataPaths.R")
source("plots.R")
library(dplyr)
dataBase <- read.csv(path_main_db)
accidentsDB <- read.csv(path_accidents_db)
#exchangeRateIsraelBank <- read.csv(path_exchange_rates)
# accidentsDB <- fixTradingDates(accidentsDB)  #should already be fixed by python!
# set all categorical data types...
dataBase$DOW <- as.factor(dataBase$DOW)
dataBase$TAX <- as.factor(dataBase$TAX)
dataBase$after_holiday <- as.factor(dataBase$after_holiday)
dataBase$afterAccidentDays <- as.factor(dataBase$afterAccidentDays)
# calculate mean return on every day vs days after accident
simple_avg <- mean(dataBase$revenue, na.rm = TRUE)
day_accident <- mean(dataBase[dataBase$afterAccidentDays == -1, 'revenue'], na.rm = TRUE)
first_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 1, 'revenue'], na.rm = TRUE)
sec_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 2, 'revenue'], na.rm = TRUE)
third_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 3, 'revenue'], na.rm = TRUE)
# calculate mean return on every day vs days after accident
simple_avgNYSE <- mean(dataBase$NYSE_revenue, na.rm = TRUE)
day_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == -1, 'NYSE_revenue'], na.rm = TRUE)
first_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 1, 'NYSE_revenue'], na.rm = TRUE)
sec_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 2, 'NYSE_revenue'], na.rm = TRUE)
third_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 3, 'NYSE_revenue'], na.rm = TRUE)
dataBase$firstDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "1", 1, 0)
dataBase$secondDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "2", 1, 0)
dataBase$thirdDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "3", 1, 0)
Israel.first_tTest <- t.test(revenue ~ firstDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
Israel.sec_tTest <- t.test(revenue ~ secondDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
Israel.third_tTest <- t.test(revenue ~ thirdDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.first_tTest <- t.test(NYSE_revenue ~ firstDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.sec_tTest <- t.test(NYSE_revenue ~ secondDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.third_tTest <- t.test(NYSE_revenue ~ thirdDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
#Plot
stat_ecdfPlot(dataBase, "israel")
geom_histogramPlot(dataBase, "israel")
stat_ecdfPlot(dataBase, "usa")
geom_histogramPlot(dataBase, "usa")
library(ggplot2)
geom_histogramPlot <- function(dataBase, country){
midBase <- dataBase[ which(dataBase$afterAccidentDays == 1 | dataBase$afterAccidentDays == 3) , ]
if(country == "israel"){
ggplot(midBase, aes(x = revenue, fill=afterAccidentDays)) + geom_histogram(bins = 10,position = "dodge", alpha = 0.7)
}else{
ggplot(midBase, aes(x = NYSE_revenue, fill=afterAccidentDays)) + geom_histogram(bins = 10,position = "dodge", alpha = 0.7)
}
}
stat_ecdfPlot <- function(dataBase, country){
midBase <- dataBase[ which(dataBase$afterAccidentDays == 1 | dataBase$afterAccidentDays == 3) , ]
if(country == "israel"){
ggplot(midBase, aes(x=revenue)) + stat_ecdf(aes(color = afterAccidentDays,linetype = afterAccidentDays),
geom = "step", size = 1.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))+
labs(y = "Cumulative probability")
}else{
ggplot(midBase, aes(x=NYSE_revenue)) + stat_ecdf(aes(color = afterAccidentDays,linetype = afterAccidentDays),
geom = "step", size = 1.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))+
labs(y = "Cumulative probability")
}
}
stat_ecdfPlot(dataBase, "israel")
geom_histogramPlot(dataBase, "israel")
stat_ecdfPlot(dataBase, "usa")
geom_histogramPlot(dataBase, "usa")
library(ggplot2)
geom_histogramPlot <- function(dataBase, country){
midBase <- dataBase# [ which(dataBase$afterAccidentDays == 1 | dataBase$afterAccidentDays == 3) , ]
if(country == "israel"){
ggplot(midBase, aes(x = revenue, fill=afterAccidentDays)) + geom_histogram(bins = 10,position = "dodge", alpha = 0.7)
}else{
ggplot(midBase, aes(x = NYSE_revenue, fill=afterAccidentDays)) + geom_histogram(bins = 10,position = "dodge", alpha = 0.7)
}
}
stat_ecdfPlot <- function(dataBase, country){
midBase <- dataBase# [ which(dataBase$afterAccidentDays == 1 | dataBase$afterAccidentDays == 3) , ]
if(country == "israel"){
ggplot(midBase, aes(x=revenue)) + stat_ecdf(aes(color = afterAccidentDays,linetype = afterAccidentDays),
geom = "step", size = 1.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))+
labs(y = "Cumulative probability")
}else{
ggplot(midBase, aes(x=NYSE_revenue)) + stat_ecdf(aes(color = afterAccidentDays,linetype = afterAccidentDays),
geom = "step", size = 1.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))+
labs(y = "Cumulative probability")
}
}
#Plot
stat_ecdfPlot(dataBase, "israel")
options(scipen=999)
source("dataFunctions.R")
source("dataPaths.R")
source("plots.R")
library(dplyr)
dataBase <- read.csv(path_main_db)
accidentsDB <- read.csv(path_accidents_db)
#exchangeRateIsraelBank <- read.csv(path_exchange_rates)
# accidentsDB <- fixTradingDates(accidentsDB)  #should already be fixed by python!
# set all categorical data types...
dataBase$DOW <- as.factor(dataBase$DOW)
dataBase$TAX <- as.factor(dataBase$TAX)
dataBase$after_holiday <- as.factor(dataBase$after_holiday)
dataBase$afterAccidentDays <- as.factor(dataBase$afterAccidentDays)
# calculate mean return on every day vs days after accident
simple_avg <- mean(dataBase$revenue, na.rm = TRUE)
day_accident <- mean(dataBase[dataBase$afterAccidentDays == -1, 'revenue'], na.rm = TRUE)
first_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 1, 'revenue'], na.rm = TRUE)
sec_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 2, 'revenue'], na.rm = TRUE)
third_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 3, 'revenue'], na.rm = TRUE)
# calculate mean return on every day vs days after accident
simple_avgNYSE <- mean(dataBase$NYSE_revenue, na.rm = TRUE)
day_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == -1, 'NYSE_revenue'], na.rm = TRUE)
first_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 1, 'NYSE_revenue'], na.rm = TRUE)
sec_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 2, 'NYSE_revenue'], na.rm = TRUE)
third_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 3, 'NYSE_revenue'], na.rm = TRUE)
dataBase$firstDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "1", 1, 0)
dataBase$secondDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "2", 1, 0)
dataBase$thirdDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "3", 1, 0)
Israel.first_tTest <- t.test(revenue ~ firstDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
Israel.sec_tTest <- t.test(revenue ~ secondDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
Israel.third_tTest <- t.test(revenue ~ thirdDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.first_tTest <- t.test(NYSE_revenue ~ firstDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.sec_tTest <- t.test(NYSE_revenue ~ secondDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.third_tTest <- t.test(NYSE_revenue ~ thirdDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
#Plot
stat_ecdfPlot(dataBase, "israel")
options(scipen=999)
source("dataFunctions.R")
source("dataPaths.R")
source("plots.R")
library(dplyr)
dataBase <- read.csv(path_main_db)
accidentsDB <- read.csv(path_accidents_db)
#exchangeRateIsraelBank <- read.csv(path_exchange_rates)
# accidentsDB <- fixTradingDates(accidentsDB)  #should already be fixed by python!
# set all categorical data types...
dataBase$DOW <- as.factor(dataBase$DOW)
dataBase$TAX <- as.factor(dataBase$TAX)
dataBase$after_holiday <- as.factor(dataBase$after_holiday)
dataBase$afterAccidentDays <- as.factor(dataBase$afterAccidentDays)
# calculate mean return on every day vs days after accident
simple_avg <- mean(dataBase$revenue, na.rm = TRUE)
day_accident <- mean(dataBase[dataBase$afterAccidentDays == -1, 'revenue'], na.rm = TRUE)
first_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 1, 'revenue'], na.rm = TRUE)
sec_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 2, 'revenue'], na.rm = TRUE)
third_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 3, 'revenue'], na.rm = TRUE)
# calculate mean return on every day vs days after accident
simple_avgNYSE <- mean(dataBase$NYSE_revenue, na.rm = TRUE)
day_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == -1, 'NYSE_revenue'], na.rm = TRUE)
first_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 1, 'NYSE_revenue'], na.rm = TRUE)
sec_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 2, 'NYSE_revenue'], na.rm = TRUE)
third_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 3, 'NYSE_revenue'], na.rm = TRUE)
dataBase$firstDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "1", 1, 0)
dataBase$secondDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "2", 1, 0)
dataBase$thirdDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "3", 1, 0)
Israel.first_tTest <- t.test(revenue ~ firstDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
Israel.sec_tTest <- t.test(revenue ~ secondDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
Israel.third_tTest <- t.test(revenue ~ thirdDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.first_tTest <- t.test(NYSE_revenue ~ firstDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.sec_tTest <- t.test(NYSE_revenue ~ secondDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.third_tTest <- t.test(NYSE_revenue ~ thirdDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
#Plot
stat_ecdfPlot(dataBase, "israel")
geom_histogramPlot(dataBase, "israel")
stat_ecdfPlot(dataBase, "usa")
geom_histogramPlot(dataBase, "usa")
options(scipen=999)
source("dataFunctions.R")
source("dataPaths.R")
source("plots.R")
library(dplyr)
dataBase <- read.csv(path_main_db)
accidentsDB <- read.csv(path_accidents_db)
#exchangeRateIsraelBank <- read.csv(path_exchange_rates)
# accidentsDB <- fixTradingDates(accidentsDB)  #should already be fixed by python!
# set all categorical data types...
dataBase$DOW <- as.factor(dataBase$DOW)
dataBase$TAX <- as.factor(dataBase$TAX)
dataBase$after_holiday <- as.factor(dataBase$after_holiday)
dataBase$afterAccidentDays <- as.factor(dataBase$afterAccidentDays)
# calculate mean return on every day vs days after accident
simple_avg <- mean(dataBase$revenue, na.rm = TRUE)
day_accident <- mean(dataBase[dataBase$afterAccidentDays == -1, 'revenue'], na.rm = TRUE)
first_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 1, 'revenue'], na.rm = TRUE)
sec_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 2, 'revenue'], na.rm = TRUE)
third_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 3, 'revenue'], na.rm = TRUE)
# calculate mean return on every day vs days after accident
simple_avgNYSE <- mean(dataBase$NYSE_revenue, na.rm = TRUE)
day_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == -1, 'NYSE_revenue'], na.rm = TRUE)
first_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 1, 'NYSE_revenue'], na.rm = TRUE)
sec_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 2, 'NYSE_revenue'], na.rm = TRUE)
third_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 3, 'NYSE_revenue'], na.rm = TRUE)
dataBase$firstDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "1", 1, 0)
dataBase$secondDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "2", 1, 0)
dataBase$thirdDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "3", 1, 0)
Israel.first_tTest <- t.test(revenue ~ firstDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
Israel.sec_tTest <- t.test(revenue ~ secondDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
Israel.third_tTest <- t.test(revenue ~ thirdDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.first_tTest <- t.test(NYSE_revenue ~ firstDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.sec_tTest <- t.test(NYSE_revenue ~ secondDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.third_tTest <- t.test(NYSE_revenue ~ thirdDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
#Plot
stat_ecdfPlot(dataBase, "israel")
View(dataBase)
stat_ecdfPlot <- function(dataBase, country){
days = c(0, 1, 2, 3)
midBase <- dataBase[ dataBase$afterAccidentDays %in% days, ]
if(country == "israel"){
ggplot(midBase, aes(x=revenue)) + stat_ecdf(aes(color = afterAccidentDays,linetype = afterAccidentDays),
geom = "step", size = 1.5) +
scale_color_manual(values = color_palette)+
labs(y = "Cumulative probability")
}else{
ggplot(midBase, aes(x=NYSE_revenue)) + stat_ecdf(aes(color = afterAccidentDays,linetype = afterAccidentDays),
geom = "step", size = 1.5) +
scale_color_manual(values = color_palette)+
labs(y = "Cumulative probability")
}
}
#Plot
stat_ecdfPlot(dataBase, "israel")
stat_ecdfPlot <- function(dataBase, country){
days = c(0, 1, 2, 3)
midBase <- dataBase[ dataBase$afterAccidentDays %in% days, ]
color_count <- length(unique(midBase$afterAccidentDays))
color_palette <- hue_pal()(color_count)
if(country == "israel"){
ggplot(midBase, aes(x=revenue)) + stat_ecdf(aes(color = afterAccidentDays,linetype = afterAccidentDays),
geom = "step", size = 1.5) +
scale_color_manual(values = color_palette)+
labs(y = "Cumulative probability")
}else{
ggplot(midBase, aes(x=NYSE_revenue)) + stat_ecdf(aes(color = afterAccidentDays,linetype = afterAccidentDays),
geom = "step", size = 1.5) +
scale_color_manual(values = color_palette)+
labs(y = "Cumulative probability")
}
}
#Plot
stat_ecdfPlot(dataBase, "israel")
library(scales)
stat_ecdfPlot <- function(dataBase, country){
days = c(0, 1, 2, 3)
midBase <- dataBase[ dataBase$afterAccidentDays %in% days, ]
color_count <- length(unique(midBase$afterAccidentDays))
color_palette <- hue_pal()(color_count)
if(country == "israel"){
ggplot(midBase, aes(x=revenue)) + stat_ecdf(aes(color = afterAccidentDays,linetype = afterAccidentDays),
geom = "step", size = 1.5) +
scale_color_manual(values = color_palette)+
labs(y = "Cumulative probability")
}else{
ggplot(midBase, aes(x=NYSE_revenue)) + stat_ecdf(aes(color = afterAccidentDays,linetype = afterAccidentDays),
geom = "step", size = 1.5) +
scale_color_manual(values = color_palette)+
labs(y = "Cumulative probability")
}
}
#Plot
stat_ecdfPlot(dataBase, "israel")
geom_histogramPlot(dataBase, "israel")
stat_ecdfPlot(dataBase, "usa")
geom_histogramPlot(dataBase, "usa")
options(scipen=999)
source("dataFunctions.R")
source("dataPaths.R")
source("plots.R")
library(dplyr)
dataBase <- read.csv(path_main_db)
accidentsDB <- read.csv(path_accidents_db)
#exchangeRateIsraelBank <- read.csv(path_exchange_rates)
# accidentsDB <- fixTradingDates(accidentsDB)  #should already be fixed by python!
# set all categorical data types...
dataBase$DOW <- as.factor(dataBase$DOW)
dataBase$TAX <- as.factor(dataBase$TAX)
dataBase$after_holiday <- as.factor(dataBase$after_holiday)
dataBase$afterAccidentDays <- as.factor(dataBase$afterAccidentDays)
# calculate mean return on every day vs days after accident
simple_avg <- mean(dataBase$revenue, na.rm = TRUE)
day_accident <- mean(dataBase[dataBase$afterAccidentDays == -1, 'revenue'], na.rm = TRUE)
first_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 1, 'revenue'], na.rm = TRUE)
sec_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 2, 'revenue'], na.rm = TRUE)
third_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 3, 'revenue'], na.rm = TRUE)
# calculate mean return on every day vs days after accident
simple_avgNYSE <- mean(dataBase$NYSE_revenue, na.rm = TRUE)
day_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == -1, 'NYSE_revenue'], na.rm = TRUE)
first_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 1, 'NYSE_revenue'], na.rm = TRUE)
sec_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 2, 'NYSE_revenue'], na.rm = TRUE)
third_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 3, 'NYSE_revenue'], na.rm = TRUE)
dataBase$firstDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "1", 1, 0)
dataBase$secondDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "2", 1, 0)
dataBase$thirdDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "3", 1, 0)
Israel.first_tTest <- t.test(revenue ~ firstDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
Israel.sec_tTest <- t.test(revenue ~ secondDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
Israel.third_tTest <- t.test(revenue ~ thirdDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.first_tTest <- t.test(NYSE_revenue ~ firstDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.sec_tTest <- t.test(NYSE_revenue ~ secondDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.third_tTest <- t.test(NYSE_revenue ~ thirdDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
#Plot
stat_ecdfPlot(dataBase, "israel")
geom_histogramPlot(dataBase, "israel")
stat_ecdfPlot(dataBase, "usa")
geom_histogramPlot(dataBase, "usa")
geom_histogramPlot <- function(dataBase, country){
days = c(0, 1, 2, 3)
midBase <- dataBase[ dataBase$afterAccidentDays %in% days, ]
color_count <- length(unique(midBase$afterAccidentDays))
color_palette <- hue_pal()(color_count)
if(country == "israel"){
ggplot(midBase, aes(x = revenue, fill=afterAccidentDays)) + geom_histogram(aes(y = ..density..),bins = 10,position = "dodge", alpha = 0.7)
}else{
ggplot(midBase, aes(x = NYSE_revenue, fill=afterAccidentDays)) + geom_histogram(aes(y = ..density..),bins = 10,position = "dodge", alpha = 0.7)
}
}
#Plot
stat_ecdfPlot(dataBase, "israel")
geom_histogramPlot(dataBase, "israel")
stat_ecdfPlot(dataBase, "usa")
geom_histogramPlot(dataBase, "usa")
geom_histogramPlot <- function(dataBase, country){
days = c(0, 1, 2, 3)
midBase <- dataBase[ dataBase$afterAccidentDays %in% days, ]
color_count <- length(unique(midBase$afterAccidentDays))
color_palette <- hue_pal()(color_count)
if(country == "israel"){
ggplot(midBase, aes(x = revenue, fill=afterAccidentDays)) + geom_histogram(aes(y = ..density..),bins = 20,position = "dodge", alpha = 0.7)
}else{
ggplot(midBase, aes(x = NYSE_revenue, fill=afterAccidentDays)) + geom_histogram(aes(y = ..density..),bins = 20,position = "dodge", alpha = 0.7)
}
}
#Plot
stat_ecdfPlot(dataBase, "israel")
geom_histogramPlot(dataBase, "israel")
stat_ecdfPlot(dataBase, "usa")
geom_histogramPlot(dataBase, "usa")
options(scipen=999)
source("dataFunctions.R")
source("dataPaths.R")
source("plots.R")
library(dplyr)
dataBase <- read.csv(path_main_db)
accidentsDB <- read.csv(path_accidents_db)
#exchangeRateIsraelBank <- read.csv(path_exchange_rates)
# accidentsDB <- fixTradingDates(accidentsDB)  #should already be fixed by python!
# set all categorical data types...
dataBase$DOW <- as.factor(dataBase$DOW)
dataBase$TAX <- as.factor(dataBase$TAX)
dataBase$after_holiday <- as.factor(dataBase$after_holiday)
dataBase$afterAccidentDays <- as.factor(dataBase$afterAccidentDays)
# calculate mean return on every day vs days after accident
simple_avg <- mean(dataBase$revenue, na.rm = TRUE)
day_accident <- mean(dataBase[dataBase$afterAccidentDays == -1, 'revenue'], na.rm = TRUE)
first_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 1, 'revenue'], na.rm = TRUE)
sec_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 2, 'revenue'], na.rm = TRUE)
third_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 3, 'revenue'], na.rm = TRUE)
# calculate mean return on every day vs days after accident
simple_avgNYSE <- mean(dataBase$NYSE_revenue, na.rm = TRUE)
day_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == -1, 'NYSE_revenue'], na.rm = TRUE)
first_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 1, 'NYSE_revenue'], na.rm = TRUE)
sec_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 2, 'NYSE_revenue'], na.rm = TRUE)
third_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 3, 'NYSE_revenue'], na.rm = TRUE)
dataBase$firstDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "1", 1, 0)
dataBase$secondDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "2", 1, 0)
dataBase$thirdDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "3", 1, 0)
Israel.first_tTest <- t.test(revenue ~ firstDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
Israel.sec_tTest <- t.test(revenue ~ secondDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
Israel.third_tTest <- t.test(revenue ~ thirdDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.first_tTest <- t.test(NYSE_revenue ~ firstDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.sec_tTest <- t.test(NYSE_revenue ~ secondDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.third_tTest <- t.test(NYSE_revenue ~ thirdDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
#Plot
stat_ecdfPlot(dataBase, "israel")
geom_histogramPlot(dataBase, "israel")
stat_ecdfPlot(dataBase, "usa")
geom_histogramPlot(dataBase, "usa")
geom_histogramPlot <- function(dataBase, country){
days = c(0, 1, 2, 3)
midBase <- dataBase[ dataBase$afterAccidentDays %in% days, ]
color_count <- length(unique(midBase$afterAccidentDays))
color_palette <- hue_pal()(color_count)
if(country == "israel"){
ggplot(midBase, aes(x = revenue, fill=afterAccidentDays)) + geom_histogram(bins = 20,position = "dodge", alpha = 0.7)+
labs(y = "count (Israel)", fill = "After Accident Days")
}else{
ggplot(midBase, aes(x = NYSE_revenue, fill=afterAccidentDays)) + geom_histogram(bins = 20,position = "dodge", alpha = 0.7)+
labs(y = "count (USA)", fill = "After Accident Days")
}
}
options(scipen=999)
source("dataFunctions.R")
source("dataPaths.R")
source("plots.R")
library(dplyr)
dataBase <- read.csv(path_main_db)
accidentsDB <- read.csv(path_accidents_db)
#exchangeRateIsraelBank <- read.csv(path_exchange_rates)
# accidentsDB <- fixTradingDates(accidentsDB)  #should already be fixed by python!
# set all categorical data types...
dataBase$DOW <- as.factor(dataBase$DOW)
dataBase$TAX <- as.factor(dataBase$TAX)
dataBase$after_holiday <- as.factor(dataBase$after_holiday)
dataBase$afterAccidentDays <- as.factor(dataBase$afterAccidentDays)
# calculate mean return on every day vs days after accident
simple_avg <- mean(dataBase$revenue, na.rm = TRUE)
day_accident <- mean(dataBase[dataBase$afterAccidentDays == -1, 'revenue'], na.rm = TRUE)
first_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 1, 'revenue'], na.rm = TRUE)
sec_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 2, 'revenue'], na.rm = TRUE)
third_day_after_accident <- mean(dataBase[dataBase$afterAccidentDays == 3, 'revenue'], na.rm = TRUE)
# calculate mean return on every day vs days after accident
simple_avgNYSE <- mean(dataBase$NYSE_revenue, na.rm = TRUE)
day_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == -1, 'NYSE_revenue'], na.rm = TRUE)
first_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 1, 'NYSE_revenue'], na.rm = TRUE)
sec_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 2, 'NYSE_revenue'], na.rm = TRUE)
third_day_after_accidentNYSE <- mean(dataBase[dataBase$afterAccidentDays == 3, 'NYSE_revenue'], na.rm = TRUE)
dataBase$firstDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "1", 1, 0)
dataBase$secondDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "2", 1, 0)
dataBase$thirdDayAfterAccident <- ifelse(dataBase$afterAccidentDays == "3", 1, 0)
Israel.first_tTest <- t.test(revenue ~ firstDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
Israel.sec_tTest <- t.test(revenue ~ secondDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
Israel.third_tTest <- t.test(revenue ~ thirdDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.first_tTest <- t.test(NYSE_revenue ~ firstDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.sec_tTest <- t.test(NYSE_revenue ~ secondDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
USA.third_tTest <- t.test(NYSE_revenue ~ thirdDayAfterAccident, data = dataBase, alternative = "two.sided", var.equal = TRUE)
#Plot
stat_ecdfPlot(dataBase, "israel")
geom_histogramPlot(dataBase, "israel")
stat_ecdfPlot(dataBase, "usa")
geom_histogramPlot(dataBase, "usa")
geom_histogramPlot <- function(dataBase, country){
days = c(0, 1, 2, 3)
midBase <- dataBase[ dataBase$afterAccidentDays %in% days, ]
color_count <- length(unique(midBase$afterAccidentDays))
color_palette <- hue_pal()(color_count)
if(country == "israel"){
ggplot(midBase, aes(x = revenue, fill=afterAccidentDays)) + geom_histogram(aes(y = ..density..),bins = 20,position = "dodge", alpha = 0.7)+
labs(y = "count (Israel)", fill = "After Accident Days")
}else{
ggplot(midBase, aes(x = NYSE_revenue, fill=afterAccidentDays)) + geom_histogram(aes(y = ..density..),bins = 20,position = "dodge", alpha = 0.7)+
labs(y = "count (USA)", fill = "After Accident Days")
}
}
#Plot
stat_ecdfPlot(dataBase, "israel")
geom_histogramPlot(dataBase, "israel")
stat_ecdfPlot(dataBase, "usa")
geom_histogramPlot(dataBase, "usa")
geom_histogramPlot <- function(dataBase, country){
days = c(0, 1, 2, 3)
midBase <- dataBase[ dataBase$afterAccidentDays %in% days, ]
color_count <- length(unique(midBase$afterAccidentDays))
color_palette <- hue_pal()(color_count)
if(country == "israel"){
ggplot(midBase, aes(x = revenue, fill=afterAccidentDays)) + geom_histogram(aes(y = ..density..),bins = 20,position = "dodge", alpha = 0.7)+
labs(y = "density (Israel)", fill = "After Accident Days")
}else{
ggplot(midBase, aes(x = NYSE_revenue, fill=afterAccidentDays)) + geom_histogram(aes(y = ..density..),bins = 20,position = "dodge", alpha = 0.7)+
labs(y = "density (USA)", fill = "After Accident Days")
}
}
#Plot
stat_ecdfPlot(dataBase, "israel")
geom_histogramPlot(dataBase, "israel")
stat_ecdfPlot(dataBase, "usa")
geom_histogramPlot(dataBase, "usa")
